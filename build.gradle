plugins {
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'java-library'
    id 'java-library-distribution'
    id 'com.jfrog.artifactory' version '4.31.0'
}

group = 'org.mifos'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {    
    maven {
        url "https://mifos.jfrog.io/artifactory/libs-snapshot-local"
    }    
    maven { 
        url "https://repo.orl.eng.hitachivantara.com/artifactory/pnt-mvn/"
    }
    mavenCentral()
}

dependencies {
    compileOnly 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.springframework.boot:spring-boot-starter-security'
    compileOnly 'jakarta.ws.rs:jakarta.ws.rs-api'
    compileOnly 'org.apache.commons:commons-lang3'
    compileOnly 'org.eclipse.persistence:eclipselink:2.7.10'
    //Apache Fineract Provider
    compileOnly 'org.apache.fineract:fineract-provider:0.0.0-0f0010d1-SNAPSHOT'
    //Pentaho Reporting Engine
    implementation 'org.pentaho.reporting.engine:classic-core:9.3.0.0-428'
    implementation 'org.pentaho.reporting.engine:classic-extensions:9.3.0.0-428'
    implementation 'org.pentaho.reporting.engine:classic-extensions-scripting:9.3.0.0-428'
    implementation 'org.pentaho.reporting.engine:wizard-core:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libbase:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libxml:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libserializer:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:librepository:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libloader:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libformula:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libformat:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libfonts:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libdocbundle:9.3.0.0-428'
    implementation 'org.graalvm.js:js:22.2.0'
    implementation 'org.graalvm.js:js-scriptengine:22.2.0'
    //Apache Fineract Client for Testing
    testImplementation 'org.apache.fineract:fineract-client:0.0.0-0f0010d1-SNAPSHOT'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'com.google.truth:truth:1.1.2'
    testImplementation'com.google.truth.extensions:truth-java8-extension:1.1.2'    
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.slf4j:slf4j-simple:1.7.30'
    testImplementation 'com.squareup.retrofit2:retrofit:2.9.0'
    testImplementation 'com.squareup.retrofit2:adapter-java8:2.9.0'
    testImplementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0'
    testImplementation 'com.squareup.retrofit2:converter-scalars:2.9.0'
    testImplementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    testImplementation 'io.gsonfire:gson-fire:1.8.5'
    testImplementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'
}

apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'

tasks.named('test') {
    useJUnitPlatform()
}

distributions {
    main {
        contents {
        	into('/') {
            	from 'README.md', 'LICENSE', 'run*'
            }
            
            into('/pentahoReports') {
            	from { 'pentahoReports' }
            }

            // Add fineract-pentaho.jar into lib/ just so it's easier to install
            // TODO exclude fineract-pentaho.jar at ZIP root (it's currently twice in the dist ZIP, at ./ and lib/) 
            into('/lib') {
                from(jar)
            }

            into('/lib') {
                from(war)
            }
        
            eachFile { FileCopyDetails fcp ->
              fcp.relativePath = new RelativePath(true, fcp.relativePath.pathString.replace('fineract-pentaho/', ''))
            }
        }
    }
}
artifactory {
  contextUrl = 'https://mifos.jfrog.io/artifactory'   //The base Artifactory URL if not overridden by the publisher/resolver
  publish {
    contextUrl = 'https://mifos.jfrog.io/artifactory'   //The base Artifactory URL for the publisher
    //A closure defining publishing information
    repository {
      repoKey = 'libs-snapshot-local'   //The Artifactory repository key to publish to
      username = "${findProperty('fineract.config.username')}"          //The publisher user name
      password = "${findProperty('fineract.config.password')}"       //The publisher password or API key
    }
    defaults {
        publications ('ivyJava','mavenJava','foo')
        publishConfigs('archives', 'published')                   
        publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
        publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
        publishPom = true   //Publish generated POM files to Artifactory (true by default).
    }
  }
  clientConfig.timeout = 600 // Artifactory connection timeout (in seconds). The default timeout is 300 seconds.
  clientConfig.setInsecureTls(false) // Set to true to skip TLS certificates verification (false by default).
}

artifactoryPublish {
    skip = false //Skip build info analysis and publishing (false by default)
    contextUrl = 'https://mifos.jfrog.io/artifactory'
    clientConfig.publisher.repoKey = 'libs-snapshot-local'
    clientConfig.publisher.username = "${findProperty('fineract.config.username')}"
    clientConfig.publisher.password = "${findProperty('fineract.config.password')}"

    clientConfig.publisher.setFilterExcludedArtifactsFromBuild(true) // Set to true to avoid adding the filtered artifacts to the build-info.
    // Minimum file size in KB for which the plugin performs checksum deploy optimization. Default: 10. Set to 0 to disable uploading files with checksum that already exists in Artifactory.
    clientConfig.publisher.minChecksumDeploySizeKb = 10
}