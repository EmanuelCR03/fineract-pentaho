plugins {
    id 'org.springframework.boot' version '2.7.4'
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'java-library'
    id 'java-library-distribution'
}

group = 'org.mifos'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {    
    maven {
        url "https://mifos.jfrog.io/artifactory/libs-snapshot-local"
    }    
    maven { 
        url "https://repo.orl.eng.hitachivantara.com/artifactory/pnt-mvn/"
    }
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-integration'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api'
    implementation 'org.apache.commons:commons-lang3'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.integration:spring-integration-test'
    compileOnly 'org.eclipse.persistence:eclipselink:2.7.10'
    //Apache Fineract Provider
    compileOnly 'org.apache.fineract:fineract-provider:0.0.0-0f0010d1-SNAPSHOT'
    //Pentaho
    implementation 'org.pentaho.reporting.engine:classic-core:9.3.0.0-428'
    implementation 'org.pentaho.reporting.engine:classic-extensions:9.3.0.0-428'
    implementation 'org.pentaho.reporting.engine:classic-extensions-scripting:9.3.0.0-428'
    implementation 'org.pentaho.reporting.engine:wizard-core:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libbase:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libxml:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libserializer:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:librepository:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libloader:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libformula:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libformat:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libfonts:9.3.0.0-428'
    implementation 'org.pentaho.reporting.library:libdocbundle:9.3.0.0-428'
    implementation 'org.graalvm.js:js:22.2.0'
    implementation 'org.graalvm.js:js-scriptengine:22.2.0'
}

project.ext.pentahoVersion = '7.0.0.6-95'
apply plugin: 'war'

tasks.named('test') {
    useJUnitPlatform()
}

distributions {
    main {
        contents {
        	into('/') {
            	from 'README.md', 'LICENSE', 'run*'
            }
            
            into('/pentahoReports') {
            	from { 'pentahoReports' }
            }

            // Add fineract-pentaho.jar into lib/ just so it's easier to install
            // TODO exclude fineract-pentaho.jar at ZIP root (it's currently twice in the dist ZIP, at ./ and lib/) 
            into('/lib') {
                from(jar)
            }

            into('/lib') {
                from(war)
            }
        
            eachFile { FileCopyDetails fcp ->
              fcp.relativePath = new RelativePath(true, fcp.relativePath.pathString.replace('fineract-pentaho/', ''))
            }
        }
    }
}